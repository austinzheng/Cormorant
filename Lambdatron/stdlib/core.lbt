; Lambdatron standard library
; core.lbt
; Parts of this code adapted from Clojure's standard library.

; Define a function in the global context
(defmacro defn [fnname & fnargs]
  `(def ~fnname (fn ~@fnargs)))

; Return the argument.
(defn identity [x] x)

; Return the logical opposite of the argument
(defn not [x]
  (if x false true))

; Return the logical AND of zero or more values
(defmacro and
  ([] true)
  ([x] x)
  ([x & next]
    `(let [__MACRO_andValue ~x]
        (if __MACRO_andValue (and ~@next) __MACRO_andValue))))

; Return the logical OR of zero or more values
(defmacro or
  ([] nil)
  ([x] x)
  ([x & next]
    `(let [__MACRO_orValue ~x]
      (if __MACRO_orValue __MACRO_orValue (or ~@next)))))

; Return the second item in a collection.
(defn second [x] (first (next x)))

; Given an item and a collection, return a new collection with the item added in the most idiomatic way.
(defn conj
  ([coll x] (.conj coll x))
  ([coll x & xs]
    (if xs
      (recur (.conj coll x) (first xs) (next xs))
      (.conj coll x))))

; Return a random number between 0 (inclusive) and n (defaults to 1) (exclusive).
(defn rand
  ([] (.rand))
  ([n] (* n (.rand))))

; Return the sum of zero or more numeric values
; TODO: Remove dependence on bootstrap function
(defn +
  ([] 0)
  ([x] x)
  ([x y] (.+ x y))
  ([x y & rest] (.B+ x y rest))
)

; Return the difference of one or more numeric values
; TODO: Remove dependence on bootstrap function
(defn -
  ([x] (- 0 x))
  ([x y] (.- x y))
  ([x y & rest] (.B- x y rest))
)

; Return the product of zero or more numeric values
; TODO: Remove dependence on bootstrap function
(defn *
  ([] 1)
  ([x] x)
  ([x y] (.* x y))
  ([x y & rest] (.B* x y rest))
)

; Return the quotient of one or more numeric values
; TODO: Remove dependence on bootstrap function
(defn /
  ([x] (/ 1 x))
  ([x y] (./ x y))
  ([x y & rest] (.B/ x y rest))
)

; Return whether one or more numerical values are strictly monotonically increasing in value
(defn <
  ([x] true)
  ([x y] (.< x y))
  ([x y & more]
    (if (.< x y)
      (if (.next more)
        (recur y (first more) (rest more))
        (.< y (first more))
      )
      false)))

; Return whether one or more numerical values are strictly monotonically decreasing in value
(defn >
  ([x] true)
  ([x y] (.> x y))
  ([x y & more]
    (if (.> x y)
      (if (.next more)
        (recur y (first more) (rest more))
        (.> y (first more))
      )
      false)))

; Return whether one or more numeric values are equivalent
(defn ==
  ([x] true)
  ([x y] (.== x y))
  ([x y & more]
    (if (.== x y)
      (if (.next more)
        (recur y (first more) (rest more))
        (.== y (first more))
      )
      false)))

; Return whether one or more values are equal
(defn =
  ([x] true)
  ([x y] (.= x y))
  ([x y & more]
    (if (.= x y)
      (if (.next more)
        (recur y (first more) (rest more))
        (.= y (first more))
      )
      false)))

; Given a collection, return true iff (pred x) is logical true for every x in the collection.
(defn every? [pred coll]
  (cond
    (nil? (seq coll)) true
    (pred (first coll)) (recur pred (next coll))
    :else false))

; Given a function and a collection(s), create new collections by mapping all elements of the input collections.
; TODO: Replace the (fn [a]... with an inline function
(defn map
  ([f coll]
    (when-let [s (seq coll)]
      (cons (f (first s)) (map f (rest s)))))
  ([f c1 c2]
    (let [s1 (seq c1) s2 (seq c2)]
      (when (and s1 s2)
        (cons (f (first s1) (first s2))
          (map f (rest s1) (rest s2))))))
  ([f c1 c2 c3]
    (let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]
      (when (and  s1 s2 s3)
        (cons (f (first s1) (first s2) (first s3))
          (map f (rest s1) (rest s2) (rest s3))))))
  ([f c1 c2 c3 & colls]
    (let [step (fn step [cs]
                 (let [ss (map seq cs)]
                   (when (every? identity ss)
                     (cons (map first ss) (step (map rest ss))))))]
            (map (fn [a] (apply f a)) (step (conj colls c3 c2 c1))))))

; Given a filter function and a collection, return a sequence consisting of all elements that pass the filter.
(defn filter [pred coll]
  (when-let [s (seq coll)]
   (let [f (first s) r (rest s)]
     (if (pred f)
       (cons f (filter pred r))
       (filter pred r)))
  ))

; Returns name string for character, or nil if none.
(def char-name-string
  {\newline "newline"
   \tab "tab"
   \space "space"
   \backspace "backspace"
   \formfeed "formfeed"
   \return "return"})

; Returns escape string for character, or nil if none.
(def char-escape-string
  {\newline "\\n"
   \tab  "\\t"
   \return "\\r"
   \" "\\\""
   \\  "\\\\"})
