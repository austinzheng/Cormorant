; Lambdatron standard library
; core.lbt
; Parts of this code adapted from Clojure's standard library.

; Define a function in the global context
(defmacro defn [fnname & fnargs]
  `(def ~fnname (fn ~@fnargs)))

; Return the logical opposite of the argument
(defn not [x]
  (if x false true))

; Return the logical AND of zero or more values
(defmacro and
  ([] true)
  ([x] x)
  ([x & next]
    `(let [__MACRO_andValue ~x]
        (if __MACRO_andValue (and ~@next) __MACRO_andValue))))

; Return the logical OR of zero or more values
(defmacro or
  ([] nil)
  ([x] x)
  ([x & next]
    `(let [__MACRO_orValue ~x]
      (if __MACRO_orValue __MACRO_orValue (or ~@next)))))

; Returns the second item in a collection
(defn second [x] (first (next x)))

; Return the sum of zero or more numeric values
; TODO: Remove dependence on bootstrap function
(defn +
  ([] 0)
  ([x] x)
  ([x y] (.+ x y))
  ([x y & rest] (.B+ x y rest))
)

; Return the difference of one or more numeric values
; TODO: Remove dependence on bootstrap function
(defn -
  ([x] (- 0 x))
  ([x y] (.- x y))
  ([x y & rest] (.B- x y rest))
)

; Return the product of zero or more numeric values
; TODO: Remove dependence on bootstrap function
(defn *
  ([] 1)
  ([x] x)
  ([x y] (.* x y))
  ([x y & rest] (.B* x y rest))
)

; Return the quotient of one or more numeric values
; TODO: Remove dependence on bootstrap function
(defn /
  ([x] (/ 1 x))
  ([x y] (./ x y))
  ([x y & rest] (.B/ x y rest))
)

; Return the modulo of x divided by y
(defn mod [x y] (.mod x y))

; Return whether one or more numerical values are strictly monotonically increasing in value
(defn <
  ([x] true)
  ([x y] (.< x y))
  ([x y & more]
    (if (.< x y)
      (if (.next more)
        (recur y (first more) (rest more))
        (.< y (first more))
      )
      false)))

; Return whether one or more numerical values are strictly monotonically decreasing in value
(defn >
  ([x] true)
  ([x y] (.> x y))
  ([x y & more]
    (if (.> x y)
      (if (.next more)
        (recur y (first more) (rest more))
        (.> y (first more))
      )
      false)))

; Return whether one or more numeric values are equivalent
(defn ==
  ([x] true)
  ([x y] (.== x y))
  ([x y & more]
    (if (.== x y)
      (if (.next more)
        (recur y (first more) (rest more))
        (.== y (first more))
      )
      false)))

; Return whether one or more values are equal
(defn =
  ([x] true)
  ([x y] (.= x y))
  ([x y & more]
    (if (.= x y)
      (if (.next more)
        (recur y (first more) (rest more))
        (.= y (first more))
      )
      false)))

; Given a filter function and a collection, return a sequence consisting of all elements that pass the filter.
(defn filter [pred coll]
  (when-let [s (seq coll)]
   (let [f (first s) r (rest s)]
     (if (pred f)
       (cons f (filter pred r))
       (filter pred r)))
  ))
