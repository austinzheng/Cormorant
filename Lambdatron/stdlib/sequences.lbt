; Lambdatron standard library
; sequences.lbt (sequences)
; Parts of this code adapted from Clojure's standard library.

; concat, as implemented by Clojure's stdlib
(defn concat
  ([] (lazy-seq nil))
  ([x] (lazy-seq x))
  ([x y]
    (lazy-seq
      (let [s (seq x)]
        (if s
          (cons (first s) (concat (rest s) y))
          y))))
  ([x y & zs]
    (let [cat (fn cat [xys zs]
                (lazy-seq
                  (let [xys (seq xys)]
                    (if xys
                      (cons (first xys) (cat (rest xys) zs))
                    (when zs
                      (cat (first zs) (next zs)))))))]
      (cat (concat x y) zs))))

; Returns a lazy, infinite sequence of repetitions of the items in coll.
(defn cycle
  [coll] (lazy-seq
    (when-let [s (seq coll)]
      (concat s (cycle s)))))

; Returns a lazy sequence of all but the first n items in coll.
(defn drop
  [n coll]
  (let [step (fn [n coll]
               (let [s (seq coll)]
                 (if (and (pos? n) s)
                   (recur (dec n) (rest s))
                   s)))]
    (lazy-seq (step n coll))))

; Returns a lazy seq of the first item in each coll, then the second etc.
(defn interleave
  ([] ())
  ([c1] (lazy-seq c1))
  ([c1 c2]
    (lazy-seq
      (let [s1 (seq c1) s2 (seq c2)]
        (when (and s1 s2)
          (cons (first s1) (cons (first s2)
                                 (interleave (rest s1) (rest s2))))))))
  ([c1 c2 & colls]
    (lazy-seq
      (let [ss (map seq (conj colls c2 c1))]
        (when (every? identity ss)
          (concat (map first ss) (apply interleave (map rest ss))))))))

; Returns a lazy seq of the elements of coll separated by sep.
(defn interpose
  [sep coll] (drop 1 (interleave (repeat sep) coll)))

; Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects.
(defn iterate
  [f x] (cons x (lazy-seq (iterate f (f x)))))

; Create a lazy sequence.
(defmacro lazy-seq [& body]
  (list '.lazy-seq (list* 'fn [] body)))

; Given a number of arguments, the last one being a list, create a list with the arguments followed by the list items.
(defn list*
  ([args] (seq args))
  ([a args] (cons a args))
  ([a b args] (cons a (cons b args)))
  ([a b c args] (cons a (cons b (cons c args))))
  ([a b c d & more]
  (cons a (cons b (cons c (cons d (spread more)))))))

; Returns a lazy (infinite!, or length n if supplied) sequence of xs.
(defn repeat
  ([x] (lazy-seq (cons x (repeat x))))
  ([n x] (take n (repeat x))))

; Returns a lazy sequence of the first n items in coll, or all items if there are fewer than n.
(defn take
  [n coll]
    (lazy-seq
      (when (pos? n)
        (when-let [s (seq coll)]
          (cons (first s) (take (dec n) (rest s)))))))
