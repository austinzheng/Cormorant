; Lambdatron standard library
; higherorder.lbt (higher-order functions)
; Parts of this code adapted from Clojure's standard library.

; Takes a set of functions and returns a fn that is the composition of those functions. The returned fn takes a
; variable number of args, applies the rightmost of fns to the args, the next fn (right-to-left) to the result,
; etc.
(defn comp
  ([] identity)
  ([f] f)
  ([f g] 
     (fn 
       ([] (f (g)))
       ([x] (f (g x)))
       ([x y] (f (g x y)))
       ([x y z] (f (g x y z)))
       ([x y z & args] (f (apply g x y z args)))))
  ([f g h] 
     (fn 
       ([] (f (g (h))))
       ([x] (f (g (h x))))
       ([x y] (f (g (h x y))))
       ([x y z] (f (g (h x y z))))
       ([x y z & args] (f (g (apply h x y z args))))))
  ([f1 f2 f3 & fs]
    (let [fs (reverse (list* f1 f2 f3 fs))]
      (fn [& args]
        (loop [ret (apply (first fs) args) fs (next fs)]
          (if fs
            (recur ((first fs) ret) (next fs))
            ret))))))

; Takes a fn f and returns a fn that takes the same arguments as f, has the same effects, if any, and returns the
; opposite truth value.
(defn complement
  [f] 
  (fn 
    ([] (not (f)))
    ([x] (not (f x)))
    ([x y] (not (f x y)))
    ([x y & zs] (not (apply f x y zs)))))

; Given a collection, return true iff (pred x) is logical true for every x in the collection.
(defn every? [pred coll]
  (cond
    (nil? (seq coll)) true
    (pred (first coll)) (recur pred (next coll))
    :else false))

; Given a filter function and a collection, return a sequence consisting of all elements that pass the filter.
(defn filter
  ([pred]
    (fn [rf]
      (fn
        ([] (rf))
        ([result] (rf result))
        ([result input]
          (if (pred input)
            (rf result input)
            result)))))
  ([pred coll]
    (when-let [s (seq coll)]
    (let [f (first s) r (rest s)]
      (if (pred f)
        (cons f (filter pred r))
        (filter pred r)))
  )))

; Takes a function f, and returns a function that calls f, replacing a nil first argument to f with the supplied value
; x. Higher arity versions can replace arguments in the second and third positions (y, z). Note that the function f can
; take any number of arguments, not just the one(s) being nil-patched.
(defn fnil
  ([f x]
   (fn
     ([a] (f (if (nil? a) x a)))
     ([a b] (f (if (nil? a) x a) b))
     ([a b c] (f (if (nil? a) x a) b c))
     ([a b c & ds] (apply f (if (nil? a) x a) b c ds))))
  ([f x y]
   (fn
     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))
     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) c))
     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) c ds))))
  ([f x y z]
   (fn
     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))
     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c)))
     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c) ds)))))

; Given a function and a collection(s), create new collections by mapping all elements of the input collections.
; TODO: Replace the (fn [a]... with an inline function
(defn map
  ([f] 
    (fn [rf]
      (fn
        ([] (rf))
        ([result] (rf result))
        ([result input]
           (rf result (f input)))
        ([result input & inputs]
           (rf result (apply f input inputs))))))
  ([f coll]
    (lazy-seq
      (when-let [s (seq coll)]
        (cons (f (first s)) (map f (rest s))))))
  ([f c1 c2]
    (lazy-seq
      (let [s1 (seq c1) s2 (seq c2)]
        (when (and s1 s2)
          (cons (f (first s1) (first s2))
            (map f (rest s1) (rest s2)))))))
  ([f c1 c2 c3]
    (lazy-seq
      (let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]
        (when (and  s1 s2 s3)
          (cons (f (first s1) (first s2) (first s3))
            (map f (rest s1) (rest s2) (rest s3)))))))
  ([f c1 c2 c3 & colls]
    (let [step (fn step [cs]
                  (lazy-seq
                    (let [ss (map seq cs)]
                      (when (every? identity ss)
                        (cons (map first ss) (step (map rest ss)))))))]
            (map (fn [a] (apply f a)) (step (conj colls c3 c2 c1))))))

; Returns the result of applying concat to the result of applying map to f and colls.  Thus function f should return a
; collection. Returns a transducer when no collections are provided.
(defn mapcat
  ([f] (comp (map f) cat))
  ([f & colls]
     (apply concat (apply map f colls))))

; Takes a function f and fewer than the normal arguments to f, and returns a fn that takes a variable number of
; additional args. When called, the returned function calls f with args + additional args.
(defn partial
  ([f] f)
  ([f arg1]
   (fn
     ([] (f arg1))
     ([x] (f arg1 x))
     ([x y] (f arg1 x y))
     ([x y z] (f arg1 x y z))
     ([x y z & args] (apply f arg1 x y z args))))
  ([f arg1 arg2]
   (fn
     ([] (f arg1 arg2))
     ([x] (f arg1 arg2 x))
     ([x y] (f arg1 arg2 x y))
     ([x y z] (f arg1 arg2 x y z))
     ([x y z & args] (apply f arg1 arg2 x y z args))))
  ([f arg1 arg2 arg3]
   (fn
     ([] (f arg1 arg2 arg3))
     ([x] (f arg1 arg2 arg3 x))
     ([x y] (f arg1 arg2 arg3 x y))
     ([x y z] (f arg1 arg2 arg3 x y z))
     ([x y z & args] (apply f arg1 arg2 arg3 x y z args))))
  ([f arg1 arg2 arg3 & more]
   (fn [& args] (apply f arg1 arg2 arg3 (concat more args)))))
